/*  */
package fr.inria.diverse.mobileprivacyprofiler.datamodel;

import com.j256.ormlite.dao.ForeignCollection;
import com.j256.ormlite.field.DatabaseField;
import com.j256.ormlite.field.ForeignCollectionField;
import com.j256.ormlite.table.DatabaseTable;
import com.j256.ormlite.stmt.PreparedQuery;
import com.j256.ormlite.stmt.QueryBuilder;
import com.j256.ormlite.stmt.SelectArg;

import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.Collection;

import org.apache.commons.lang3.StringEscapeUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import fr.inria.diverse.mobileprivacyprofiler.datamodel.associations.GSMCell_NeighboringCellHistory;
import fr.inria.diverse.mobileprivacyprofiler.datamodel.associations.DetectedWifi_AccessPoint;
// Start of user code additional import for NeighboringCellHistory
// End of user code

/** 
  *  
  */ 
@DatabaseTable(tableName = "neighboringCellHistory")
public class NeighboringCellHistory {

	public static Log log = LogFactory.getLog(NeighboringCellHistory.class);

	public static final String XML_NEIGHBORINGCELLHISTORY = "NEIGHBORINGCELLHISTORY";
	public static final String XML_ATT_ID = "id";
	public static final String XML_ATT_DATE = "date";
	public static final String XML_ATT_STRENGTH = "strength";
	public static final String XML_REF_CELLS = "cells";
	// id is generated by the database and set on the object automagically
	@DatabaseField(generatedId = true)
	protected int _id;

	/**
     * dbHelper used to autorefresh values and doing queries
     * must be set other wise most getter will return proxy that will need to be refreshed
	 */
	protected MobilePrivacyProfilerDBHelper _contextDB = null;

	/**
	 * object created from DB may need to be updated from the DB for being fully navigable
	 */
	

	@DatabaseField
	protected java.lang.String date;

	@DatabaseField
	protected int strength;
	

	/** observed cells at that date */ 
	// work in progress, find association 
	// Association many to many GSMCell_NeighboringCellHistory
	@ForeignCollectionField(eager = false, foreignFieldName = "neighboringCellHistory")	
	protected ForeignCollection<GSMCell_NeighboringCellHistory> gSMCell_NeighboringCellHistory;

	/** observed cells at that date 
	  * Attention, returned list is readonly
      */
	public List<GSMCell> getCells(){
		List<GSMCell> result = new ArrayList<GSMCell>();
		
		for (GSMCell_NeighboringCellHistory aGSMCell_NeighboringCellHistory : gSMCell_NeighboringCellHistory) {
			if(_contextDB != null) aGSMCell_NeighboringCellHistory.setContextDB(_contextDB);
			result.add(aGSMCell_NeighboringCellHistory.getGSMCell());
		}
		return result;
	}
	public void addGSMCell(GSMCell gSMCell){
		try {
			_contextDB.gSMCell_NeighboringCellHistoryDao.create(new GSMCell_NeighboringCellHistory( gSMCell, this));		
		} catch (SQLException e) {
			log.error("Pb while adding association gSMCell_NeighboringCellHistory",e);
		}
	}
	// end work in progress 	

				

	// Start of user code NeighboringCellHistory additional user properties
	// End of user code
	
	public NeighboringCellHistory() {} // needed by ormlite
	public NeighboringCellHistory(java.lang.String date, int strength) {
		super();
		this.date = date;
		this.strength = strength;
	} 

	public int getId() {
		return _id;
	}
	public void setId(int id) {
		this._id = id;
	}

	public MobilePrivacyProfilerDBHelper getContextDB(){
		return _contextDB;
	}
	public void setContextDB(MobilePrivacyProfilerDBHelper contextDB){
		this._contextDB = contextDB;
	}

	public java.lang.String getDate() {
		return this.date;
	}
	public void setDate(java.lang.String date) {
		this.date = date;
	}
	public int getStrength() {
		return this.strength;
	}
	public void setStrength(int strength) {
		this.strength = strength;
	}




	public String toXML(String indent, MobilePrivacyProfilerDBHelper contextDB){
		StringBuilder sb = new StringBuilder();
		sb.append(indent+"<");
    	sb.append(XML_NEIGHBORINGCELLHISTORY);
		sb.append(" "+XML_ATT_ID+"=\"");
		sb.append(this._id);
    	sb.append("\" ");
		sb.append(" ");
    	sb.append(XML_ATT_DATE);
    	sb.append("=\"");
		sb.append(StringEscapeUtils.escapeXml(this.date));
    	sb.append("\" ");
		sb.append(" ");
    	sb.append(XML_ATT_STRENGTH);
    	sb.append("=\"");
		sb.append(this.strength);
    	sb.append("\" ");
    	sb.append(">");


		
		for(GSMCell ref : this.getCells()){
    		sb.append("\n"+indent+"\t<"+XML_REF_CELLS+" id=\"");
    		sb.append(ref._id);
        	sb.append("\"/>");
			
    	}
			
		// TODO deal with other case

		sb.append("</"+XML_NEIGHBORINGCELLHISTORY+">");
		return sb.toString();
	}
}
